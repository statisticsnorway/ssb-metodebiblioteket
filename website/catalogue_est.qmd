---
title: "Estimering og vekting"
format:
  html:
    echo: false
    page-layout: full
---
<br>

Estimering er å finne verdi for en populasjonsstørrelse basert på den informasjonen vi har samlet inn fra (utvalgs)undersøkelsen. Vanligvis er vi interessert i forskjellige størrelser - totaler, gjennomsnitt, andeler og varianser er mest vanlig - for ulike variabler. Estimering innebærer ofte at hver enhet i utvalget tildeles en vekt, dette gjøres så godt som alltid for person- og husholdningsundersøkelser. Vi kan også basere estimeringen på en statistisk modell, noe som er vanlig å gjøre i næringslivsundersøkelser. 

Du kan finne mer information om estimering og vekting på [Byrånettet](https://ssbno.sharepoint.com/:u:/r/sites/Metodikkistatistikkproduksjonen/SitePages/Estimering-og-vekting.aspx?csf=1&web=1&e=Ohp74U). 


```{r}
library(stringr)
library(rmarkdown)

# Read in data
dt <- read.csv("../data/katalogdata.csv")

# filter for dataediterings functions
dt <- dt[grepl("vektberegning", dt$keyword), ]

# Add column for language
dt["språk"] <- stringr::word(dt$keyword)[1]
dt["språk"] <- ifelse(dt["språk"] == "rfunc", "R", "Python")

# Add column for combination of function name and link
dt["func_link"] <- str_trim(do.call(paste, c(dt[c("func", "url")], sep = ";")))
dt["pack_link"] <- str_trim(do.call(paste, c(dt[c("pack", "pack_url")], sep = ";")))

jsonlite::toJSON(dt) -> dt_json
ojs_define(my_ojs_data = dt_json)
```

```{ojs}
// Read in data
testdata = JSON.parse(my_ojs_data)
```

```{ojs}

viewof tema = Inputs.radio(["vektberegning", "usikkerhetsberegning"],
  {label: "Metodeområde: ", value: "vektberegning"} 
)

```



```{ojs}

filtered = testdata.filter(r => r.keyword.includes(tema))

```

```{ojs}

// Function for formatting long descriptions
function overflow_large(words) {
  return (x) => htl.html`<div style="
    display: inline-block;
    width: 450px;
    white-space: pre-line;
    break-text: auto;
    overflow-wrap: normal;
    height: auto;
    word-wrap: break-word;
    overflow: auto;
">${x.toLocaleString("en")}`;
}

// Function for formatting names
function overflow_names(words) {
  return (x) => htl.html`<div style="
    display: inline-block;
    width: 250px;
    white-space: pre-line;
    break-text: auto;
    overflow-wrap: normal;
    height: auto;
    word-wrap: break-word;
    overflow: auto;
">${x.toLocaleString("en")}`;
}

// Function for adding hyperlinks
function get_url(new_url) {
  return (x) => htl.html`<a href=${x.split(";")[1]} target=_blank>${x.split(";")[0]} </a>`;
}

```

```{ojs}
viewof filter_dt = Inputs.search(filtered)

table_out = Inputs.table(filter_dt, { columns: [
    "func_link",
    "pack_link",
    "språk",
    "navn",
    "description"
  ],
  header: {
    func_link: "Funksjon",
    pack_link: "Pakke",
    språk: "Språk",
    navn: "Navn",
    description: "Beskrivelse"
  },
  format: {
  func_link: get_url(
      filter_dt, 
      (d) => d["func_lnk"]
      ),
  pack_link: get_url(
      filter_dt, 
      (d) => d["pack_lnk"]
      ),
  navn: overflow_names(
  filter_dt,
    (x) => x["navn"]
      ),
  description: overflow_large(
      filter_dt,
      (x) => x["description"]
      ),
  },
  rows: 100
})

```

