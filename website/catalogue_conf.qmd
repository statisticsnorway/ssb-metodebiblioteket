---
title: "Konfidensialitet"
format:
  html:
    echo: false
    page-layout: full
---

Statistikkloven [§ 7. Statistisk konfidensialitet ved formidling av offisiell statistikk](https://lovdata.no/lov/2019-06-21-32/§7) pålegger at vi ikke publiserer statistikk slik at statistisk informasjon kan føres tilbake til enkeltpersoner eller andre typer statistiske enheter. Hvis dette likevel skjer sier vi at det har funnet sted en avsløring.

Hvis hensynet til oppbyggingen av statistikken krever det, kan det i noen tilfeller gjøres unntak. Slik publisering må ikke være til skade for de statistiske enhetene som inngår i statistikken. 

At vi i SSB følger dette er avgjørende for oppgavegivernes tillit til oss og for at vi skal kunne utføre vårt samfunnsoppdrag.


```{r}
library(stringr)
library(rmarkdown)

# Read in data
dt <- read.csv("../data/katalogdata.csv")

# filter for dataediterings functions
dt <- dt[grepl("konfidensialitet", dt$keyword), ]

# Add column for language
dt["språk"] <- stringr::word(dt$keyword)[1]
dt["språk"] <- ifelse(dt["språk"] == "rfunc", "R", "Python")

# Add column for combination of function name and link
dt["func_link"] <- str_trim(do.call(paste, c(dt[c("func", "url")], sep = ";")))
dt["pack_link"] <- str_trim(do.call(paste, c(dt[c("pack", "pack_url")], sep = ";")))

jsonlite::toJSON(dt) -> dt_json
ojs_define(my_ojs_data = dt_json)
```

```{ojs}
// Read in data
testdata = JSON.parse(my_ojs_data)
```

```{ojs}
//| panel: input

viewof tema = Inputs.radio( ["undertrykking", "avrunding", "støylegging"],
  {label: "Metodeområde: ", value: "undertrykking"}
)

```



```{ojs}
// Filter data based on check boxes
filtered = testdata.filter(r=> r.keyword.includes(tema));

```

```{ojs}

// Function for formatting long descriptions
function overflow_large(words) {
  return (x) => htl.html`<div style="
    display: inline-block;
    width: 450px;
    white-space: pre-line;
    break-text: auto;
    overflow-wrap: normal;
    height: auto;
    word-wrap: break-word;
    overflow: auto;
">${x.toLocaleString("en")}`;
}

// Function for formatting names
function overflow_names(words) {
  return (x) => htl.html`<div style="
    display: inline-block;
    width: 250px;
    white-space: pre-line;
    break-text: auto;
    overflow-wrap: normal;
    height: auto;
    word-wrap: break-word;
    overflow: auto;
">${x.toLocaleString("en")}`;
}

// Function for adding hyperlinks
function get_url(new_url) {
  return (x) => htl.html`<a href=${x.split(";")[1]} target=_blank>${x.split(";")[0]} </a>`;
}

```

```{ojs}
viewof filter_dt = Inputs.search(filtered)

table_out = Inputs.table(filter_dt, { columns: [
    "func_link",
    "pack",
    "språk",
    "navn",
    "description"
  ],
  header: {
    func_link: "Funksjon",
    pack_link: "Pakke",
    språk: "Språk",
    navn: "Navn",
    description: "Beskrivelse"
  },
  format: {
  func_link: get_url(
      filter_dt, 
      (d) => d["func_lnk"]
      ),
  pack_link: get_url(
      filter_dt, 
      (d) => d["pack_lnk"]
      ),
  navn: overflow_names(
  filter_dt,
    (x) => x["navn"]
      ),
  description: overflow_large(
      filter_dt,
      (x) => x["description"]
      ),
  },
  rows: 100
})

```

